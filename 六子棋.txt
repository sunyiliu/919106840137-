GameModel.cpp中修改
void GameModel::computer1(){
    int personNum = 0; // 玩家连成子的个数
    int botNum = 0; // AI连成子的个数
    int emptyNum = 0; // 各方向空白位的个数
    // 清空评分
    scoreMapVec1.clear();
    for (int i = 0; i <= 21; i++)
    {
        std::vector<int> lineScores;
        for (int j = 0; j <= 21; j++)
            lineScores.push_back(0);
        scoreMapVec1.push_back(lineScores);
    }
    scoreMapVec1[10][10]=1;
    //积分机制
    //玩家
    //两颗 4  死三 20  活三 30  死四 45  活四  95  五颗 8000
    //电脑
    //一颗 1  两颗 5  死三 15  活三 40  死四 50  活四 90  五颗 100000
    // 计分（此处是完全遍历）
    for (int row = 1; row < 21; row++)
        for (int col = 1; col < 21;col++)
        {
            // 空白点就算
            if (row > 0 && col > 0 &&
                gameMapVec[row][col] == 0)
            {
                // 遍历周围八个方向
                for (int y = -1; y <= 1; y++)
                    for (int x = -1; x <= 1; x++)
                    {
                        if(gameMapVec[row+x][col+y]!=0) scoreMapVec[row][col]+=1;
                        // 重置
                        personNum = 0;
                        botNum = 0;
                        emptyNum = 0;

                        // 原坐标不算
                        if (y != 0 || x != 0)
                        {
                            // 每个方向延伸5个子

                            // 对玩家白子评分（正反两个方向）
                            for (int i = 1; i <= 5; i++)
                            {
                                if (row + i * y > 0 && row + i * y < 21&&
                                    col + i * x > 0 && col + i * x < 21 &&
                                    gameMapVec[row + i * y][col + i * x] == -1) // 玩家的子
                                {
                                    personNum++;
                                }
                                else if (row + i * y > 0 && row + i * y <21 &&
                                         col + i * x > 0 && col + i * x < 21 &&
                                         gameMapVec[row + i * y][col + i * x] == 0) // 空白位
                                {
                                    emptyNum++;
                                    break;
                                }
                                else            // 出边界
                                    break;
                            }
                            for (int i = 1; i <= 5; i++)
                            {
                                if (row - i * y > 0 && row - i * y < 21 &&
                                    col - i * x > 0 && col - i * x < 21&&
                                    gameMapVec[row - i * y][col - i * x] == -1) // 玩家的子
                                {
                                    personNum++;
                                }
                                else if (row - i * y > 0 && row - i * y < 21 &&
                                         col - i * x > 0 && col - i * x < 21 &&
                                         gameMapVec[row - i * y][col - i * x] == 0) // 空白位
                                {
                                    emptyNum++;
                                    break;
                                }
                                else            // 出边界
                                    break;
                            }
                            if (personNum == 2)                      // 杀三
                                scoreMapVec1[row][col] += 4;
                            else if (personNum == 3)                // 杀四
                            {
                                if (emptyNum == 1)
                                    scoreMapVec1[row][col] += 20;
                                else if (emptyNum == 2)
                                    scoreMapVec1[row][col] += 30;
                            }
                            else if (personNum == 4)                 // 杀五
                            {
                                // 量变空位不一样，优先级不一样
                                if (emptyNum == 1)
                                    scoreMapVec1[row][col] += 45;
                                else if (emptyNum == 2)
                                    scoreMapVec1[row][col] += 95;
                            }
                            else if (personNum == 5)                 // 杀六
                                scoreMapVec1[row][col] += 8000;
                            // 进行一次清空
                            emptyNum = 0;
                            // 对AI黑子评分
                            for (int i = 1; i <= 5; i++)
                            {
                                if (row + i * y > 0 && row + i * y < 21 &&
                                    col + i * x > 0 && col + i * x < 21 &&
                                    gameMapVec[row + i * y][col + i * x] == 1) // 自己的子
                                {
                                    botNum++;
                                }
                                else if (row + i * y > 0 && row + i * y <21 &&
                                         col + i * x > 0 && col + i * x < 21 &&
                                         gameMapVec[row +i * y][col + i * x] == 0) // 空白位
                                {
                                    emptyNum++;
                                    break;
                                }
                                else            // 出边界
                                    break;
                            }
                            for (int i = 1; i <= 5; i++)
                            {
                                if (row - i * y > 0 && row - i * y < 21 &&
                                    col - i * x > 0 && col - i * x < 21 &&
                                    gameMapVec[row - i * y][col - i * x] == 1) // AI的子
                                {
                                    botNum++;
                                }
                                else if (row - i * y > 0 && row - i * y < 21 &&
                                         col - i * x > 0 && col - i * x < 21&&
                                         gameMapVec[row - i * y][col - i * x] == 0) // 空白位
                                {
                                    emptyNum++;
                                    break;
                                }
                                else            // 出边界
                                    break;
                            }
                            if (botNum == 1)                      // 普通下子
                                scoreMapVec1[row][col] += 1;
                            else if (botNum == 2)                 // 二
                                scoreMapVec1[row][col] += 5;
                            else if (botNum == 3)
                            {
                                if (emptyNum == 1)                // 死三
                                    scoreMapVec1[row][col] += 15;
                                else if (emptyNum == 2)
                                    scoreMapVec1[row][col] += 40;  // 活三
                            }
                            else if (botNum == 4)
                            {
                                if (emptyNum == 1)                // 死四
                                    scoreMapVec1[row][col] += 50;
                                else if (emptyNum == 2)
                                    scoreMapVec1[row][col] += 90; // 活四
                            }
                            else if (botNum >= 5)
                                scoreMapVec1[row][col] += 100000;   // 活五
                        }
                    }
            }
        }
}

void GameModel::computer(){
       int personNum = 0; // 玩家连成子的个数
       int botNum = 0; // AI连成子的个数
       int emptyNum = 0; // 各方向空白位的个数
       // 清空评分
       scoreMapVec.clear();
       for (int i = 0; i < 21; i++)
       {
           std::vector<int> lineScores;
           for (int j = 0; j <= 21; j++)
               lineScores.push_back(0);
           scoreMapVec.push_back(lineScores);
       }
       //积分机制
       //玩家
       //两颗 4  死三 20  活三 30  死四 45  活四  95  五颗 8000
       //电脑
       //一颗 1  两颗 5  死三 15  活三 40  死四 50  活四 90  五颗 100000
       // 计分（此处是完全遍历）
       for (int row = 1; row < 21; row++)
           for (int col = 1; col < 21;col++)
           {
               // 空白点就算
               if (row > 0 && col > 0 &&
                   gameMapVec[row][col] == 0)
               {
                   // 遍历周围八个方向
                   for (int y = -1; y <= 1; y++)
                       for (int x = -1; x <= 1; x++)
                       {
                           if(gameMapVec[row+x][col+y]!=0) scoreMapVec[row][col]+=1;
                           // 重置
                           personNum = 0;
                           botNum = 0;
                           emptyNum = 0;
                           // 原坐标不算
                           if (y != 0 || x != 0)
                           {
                               // 每个方向延伸5个子
                               // 对玩家白子评分（正反两个方向）
                               for (int i = 1; i <= 5; i++)
                               {
                                   if (row + i * y > 0 && row + i * y < 21&&
                                       col + i * x > 0 && col + i * x < 21 &&
                                       gameMapVec[row + i * y][col + i * x] == 1) // 玩家的子
                                   {
                                       personNum++;
                                   }
                                   else if (row + i * y > 0 && row + i * y <21 &&
                                            col + i * x > 0 && col + i * x < 21 &&
                                            gameMapVec[row + i * y][col + i * x] == 0) // 空白位
                                   {
                                       emptyNum++;
                                       break;
                                   }
                                   else            // 出边界
                                       break;
                               }
                               for (int i = 1; i <= 5; i++)
                               {
                                   if (row - i * y > 0 && row - i * y < 21 &&
                                       col - i * x > 0 && col - i * x < 21&&
                                       gameMapVec[row - i * y][col - i * x] == 1) // 玩家的子
                                   {
                                       personNum++;
                                   }
                                   else if (row - i * y > 0 && row - i * y < 21 &&
                                            col - i * x > 0 && col - i * x < 21 &&
                                            gameMapVec[row - i * y][col - i * x] == 0) // 空白位
                                   {
                                       emptyNum++;
                                       break;
                                   }
                                   else            // 出边界
                                       break;
                               }
                               if (personNum == 2)                      // 杀三
                                   scoreMapVec[row][col] += 4;
                               else if (personNum == 3)                // 杀四
                               {
                                   if (emptyNum == 1)
                                       scoreMapVec[row][col] += 20;
                                   else if (emptyNum == 2)
                                       scoreMapVec[row][col] += 30;
                               }
                               else if (personNum == 4)                 // 杀五
                               {
                                   // 量变空位不一样，优先级不一样
                                   if (emptyNum == 1)
                                       scoreMapVec[row][col] += 45;
                                   else if (emptyNum == 2)
                                       scoreMapVec[row][col] += 95;
                               }
                               else if (personNum == 5)                 // 杀六
                                   scoreMapVec[row][col] += 8000;
                               // 进行一次清空
                               emptyNum = 0;
                               // 对AI黑子评分
                               for (int i = 1; i <= 5; i++)
                               {
                                   if (row + i * y > 0 && row + i * y < 21 &&
                                       col + i * x > 0 && col + i * x < 21 &&
                                       gameMapVec[row + i * y][col + i * x] == -1) // AI的子
                                   {
                                       botNum++;
                                   }
                                   else if (row + i * y > 0 && row + i * y <21 &&
                                            col + i * x > 0 && col + i * x < 21 &&
                                            gameMapVec[row +i * y][col + i * x] == 0) // 空白位
                                   {
                                       emptyNum++;
                                       break;
                                   }
                                   else            // 出边界
                                       break;
                               }
                               for (int i = 1; i <= 5; i++)
                               {
                                   if (row - i * y > 0 && row - i * y < 21 &&
                                       col - i * x > 0 && col - i * x < 21 &&
                                       gameMapVec[row - i * y][col - i * x] == -1) // AI的子
                                   {
                                       botNum++;
                                   }
                                   else if (row - i * y > 0 && row - i * y < 21 &&
                                            col - i * x > 0 && col - i * x < 21&&
                                            gameMapVec[row - i * y][col - i * x] == 0) // 空白位
                                   {
                                       emptyNum++;
                                       break;
                                   }
                                   else            // 出边界
                                       break;
                               }
                               if (botNum == 1)                      // 普通下子
                                   scoreMapVec[row][col] += 1;
                               else if (botNum == 2)                 // 二
                                   scoreMapVec[row][col] += 5;
                               else if (botNum == 3)
                               {
                                   if (emptyNum == 1)                // 死三
                                       scoreMapVec[row][col] += 15;
                                   else if (emptyNum == 2)
                                       scoreMapVec[row][col] += 40;  // 活三
                               }
                               else if (botNum == 4)
                               {
                                   if (emptyNum == 1)                // 死四
                                       scoreMapVec[row][col] += 50;
                                   else if (emptyNum == 2)
                                       scoreMapVec[row][col] += 90; // 活四
                               }
                               else if (botNum >= 5)
                                   scoreMapVec[row][col] += 100000;   // 活五
                           }
                       }
               }
           }
}