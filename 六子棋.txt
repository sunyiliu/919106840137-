Qt.pro中

QT   +=   network 

serverwidget.h中
#include <QWidget>
#include<QTcpServer>  //监听套接字
#include<QTcpSocket>   //通信套接字
#include"gamemodel.h"
namespace Ui {
class serverwidget;
}
class serverwidget : public QWidget
{
    Q_OBJECT
public:
    explicit serverwidget(QWidget *parent = 0);
    ~serverwidget();
signals:
private slots:
     void on_buttonclose_clicked();
private:
    Ui::serverwidget *ui;
    QTcpServer *tcpServer;       //监听套接字
    QTcpSocket *tcpSocket;       //通信套接字
};

serverwidget.cpp中
#include<QMenuBar>
serverwidget::serverwidget(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::serverwidget)
{
    ui->setupUi(this);
    //监听套接字，指定父对象（this），让其自动回收空间
    tcpServer= new QTcpServer(this);
    tcpServer->listen(QHostAddress::Any,8888);           //监听
    connect(tcpServer,&QTcpServer::newConnection,[=](){   //连接client
        tcpSocket=tcpServer->nextPendingConnection();      //去除建立好连接的套接字
        QString ip=tcpSocket->peerAddress().toString();    //获取client的ip
        qint16 port=tcpSocket->peerPort();                //获取client的窗口信息
        QString temp=QString("[%1:%2]:成功连接").arg(ip).arg(port); //连接信息显示格式
        ui->textEdit->setText(temp);           //放在文本框里
    });
    this->setFixedSize(1406,1200);
      //设置图标
      this->setWindowIcon(QPixmap(":/new/prefix1/res/8.jpg"));
      //设置标题
      this->setWindowTitle("联机模式(server端)");
}
void serverwidget::paintEvent(QPaintEvent *){
    //创建画家，制定绘图设备
    QPainter painter(this);
    //创建QPixmap对象
    QPixmap pix;
    //加载图片
    pix.load(":/new/prefix1/res/1001.jpg");
    //绘制背景图
    painter.drawPixmap(0,0,this->width(),this->height(),pix);
}
serverwidget::~serverwidget()
{
    delete ui;
}
void serverwidget::on_buttonclose_clicked()
{
    tcpSocket->disconnectFromHost();
    tcpSocket->close();
}

clientwidget.h中
#include <QWidget>
#include<QTcpSocket>       //通信套接字
#include"gamemodel.h"
namespace Ui {
class clientwidget;
}
class clientwidget : public QWidget
{
    Q_OBJECT
public:
    explicit clientwidget(QWidget *parent = 0);
    ~clientwidget();
signals:
private slots:
private:
    Ui::clientwidget *ui;
    QTcpSocket *tcpSocket;
};

clientwidget.cpp中
#include<QHostAddress>
#include<QMenuBar>
clientwidget::clientwidget(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::clientwidget)
{
    ui->setupUi(this);
    setMouseTracking(true);
    tcpSocket=NULL;
    tcpSocket=new QTcpSocket(this);
    connect(tcpSocket,&QTcpSocket::connected,[=](){
        ui->textEdit_2->setText("成功和服务器连接");
    });
    this->setFixedSize(1406,1200);
      //设置图标
      this->setWindowIcon(QPixmap(":/new/prefix1/res/8.jpg"));
      //设置标题
      this->setWindowTitle("联机模式(client端)");
}
void clientwidget::paintEvent(QPaintEvent *){
    //创建画家，制定绘图设备
    QPainter painter(this);
    //创建QPixmap对象
    QPixmap pix;
    //加载图片
    pix.load(":/new/prefix1/res/1001.jpg");
    //绘制背景图
    painter.drawPixmap(0,0,this->width(),this->height(),pix);
}
clientwidget::~clientwidget()
{
    delete ui;
}
void clientwidget::on_buttonConnect_clicked()
{
    QString ip=ui->lineEditIP->text();                 //获取输入的ip
    qint16 port = ui->lineEditPort->text().toInt();    //获取输入的窗口
    tcpSocket->connectToHost(QHostAddress(ip),port);    //建立连接
}

